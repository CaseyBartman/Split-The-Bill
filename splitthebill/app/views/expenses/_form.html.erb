<div>
  <%= form_with(model: [@trip, expense]) do |form| %>
    <% if expense.errors.any? %>
      <div style="color: red">
        <h2><%= pluralize(expense.errors.count, "error") %> prohibited this expense from being saved:</h2>
        <ul>
          <% expense.errors.each do |error| %>
            <li><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <!-- Trip Selection (already pre-populated in controller) -->
    <div class = "logInForm p-2">
      <%= form.label :trip_id, "Trip", style: "display: block" %>
      <%= form.text_field :trip_id, value: @trip.name, readonly: true, class: "logInField" %>
    </div>

    <div class = "logInForm p-2">
      <%= form.label :name, style: "display: block" %>
      <%= form.text_field :name, autocomplete: "off", class: "logInField"%>
    </div>

    <div class = "logInForm p-2">
      <%= form.label :expense_type %>
      <%= form.select :expense_type, ["Food", "Gas", "Lodging", "Entertainment", "Miscellaneous"], prompt: "Select a category", class: "logInField" %>
    </div>

    <div class = "logInForm p-2">
      <%= form.label :amount, style: "display: block" %>
      <%= form.text_field :amount, id: "expense-amount", class: "logInField" %>
    </div>

    <!-- Payer Selection-->
    <div class = "logInForm p-2">
      <%= form.label :payer_id, "Who Paid?" %>
      <%= form.collection_select :payer_id, @participants.map(&:user), :id, :name, class: "logInField", prompt: "Select a Payer" %>
    </div>

    <div class = "logInForm p-2">
      <%= form.label :date, style: "display: block" %>
      <%= form.date_field :date, class: "logInField" %>
    </div>


    <!-- Hack to fix url generation error with edit -->
    <%= form.hidden_field :trip_id, value: @trip.id %> 
    
  <h4 class = "m-3">Participants' Contributions</h4>
  <div class = "logInForm">
    <!--For the new expense (create)! -->
    <% if @expense.new_record? %>
  <%= form.fields_for :contributions do |contribution_fields| %>
      <div>
        <%= contribution_fields.label :amount, "#{contribution_fields.object.user.name}"%>
        <%= contribution_fields.hidden_field :user_id %>
        <%= contribution_fields.text_field :amount, class: "contribution-amount logInField m-1" %>
        <%= contribution_fields.check_box :paid %>
      </div>
    <% end %>
  </div>
    <!-- For the edit (update) view! -->
    <% else %>
    <% already_processed = [] %>
  <div class="contributions">
    <% participants_array = @participants.to_a %> <!-- Store participants in an array! -->
    <% index = 0 %> <!-- Initialize the index variable! We need to do it manually since Rails doesn't play nice with nested form edits!-->
    <%= form.fields_for :contributions do |contribution_fields| %>
      
        <div class="contribution-field logInForm">
          <!-- Get the participant object at the current index -->
          <% participant = participants_array[index] %>

          <!-- Hidden Field for User ID! -->
          <%= contribution_fields.hidden_field :user_id, value: participant.user.id %>

          <!-- Amount Field. Note, we have to index everything ourselves because otherwise Rails repeats data. Reduces redundancy.-->
          <!-- This is the same reason we manually write out the name on our own instead of using the one generated by rails automatically! -->
          <%= contribution_fields.label :amount, "Contribution for #{participant.user.name}" %>
          <!-- Note, we've given this field a class for the specific purpose of calculating amounts with the JS below -->
          <%= contribution_fields.text_field :amount, name: "expense[contributions_attributes][#{index}][amount]", class: "contribution-amount logInField m-1" %>

          <!-- Paid Checkboxes! -->
          <!-- Again, see how we need to make our own name with that index to prevent duplicated participants. -->
          <%= contribution_fields.label :paid, "Has paid their share?" %>
          <%= contribution_fields.check_box :paid, name: "expense[contributions_attributes][#{index}][paid]", class: "logInField m-1" %>
        </div>

        <% index += 1 %>
    <% end %>
  </div>


    <% end %>
       <!-- Cool trick! Can change the text of the button depending on if we are editing or making a new expense!-->
    <div class = "tripForm">
      <%= form.submit expense.new_record? ? "Create Expense" : "Save Changes", class: "btn btn-primary logInButton mt-3" %>
    </div>
  <% end %>
</div>

<!-- Tag for our contribution toast, only populated if the warning occurs -->
<div id="contribution-warning">
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    //Getting all the objects with the values we need to make our event listener calculate correctly!
    //Here, we grab our expense amount and contribution amount objects
    const expenseAmountField = document.getElementById("expense-amount");
    const contributionAmountFields = document.querySelectorAll(".contribution-amount");
    const warningDiv = document.getElementById("contribution-warning");
    const submitButton = document.getElementById("submit-expense");
    const form = document.querySelector("form");

    //Here, we validate if the contribution amounts add up properly!
    function validateContributions() {
      const expenseAmount = parseFloat(expenseAmountField.value) || 0; //Converting the value to a number, or 0 if it is empty (invalid)!
      let totalContributions = 0;

      //Just summing up the values we've input
      contributionAmountFields.forEach(function (field) {
        const value = parseFloat(field.value) || 0;
        totalContributions += value;
      });

      //Setting a little toast alert on the bottom of the page as well, since it looks nicer than a plain alert
      if (totalContributions !== expenseAmount) {
        //Show the warning message and update it with the expense amount and current contribution total!
        //(Rounded to 2 decimals!)
        warningDiv.style.display = "block"; //Previously empty, now show displayed
        warningDiv.textContent = `Contributions must add up to the total expense amount of ${expenseAmount.toFixed(2)}. Currently, they add up to ${totalContributions.toFixed(2)}.`;
        return false;
      } else {
        warningDiv.style.display = "none"; //Setting the toast message to be hidden again!
        return true;
      }
    }

    //Function to prevent negative inputs!
    function preventNegativeValues(event) {
      const value = parseFloat(event.target.value);
      if (value < 0) {
        event.target.value = 0; // Reset the value if negative
      }
    }

    // Prevent form submission if contributions do not match
    form.addEventListener("submit", function (event) {
      if (!validateContributions()) {
        event.preventDefault(); //Prevent our submission of the form!
      }
    });

    //Now, we add the event listeners to update the expense ammount values in real time as they are input!
    expenseAmountField.addEventListener("input", function (event) {
      preventNegativeValues(event); // Check for negative values
      validateContributions(); // Validate contributions
    });

    //Adding event listeners to prevent each contribution amount on live
    contributionAmountFields.forEach(function (field) {
        field.addEventListener("input", function (event) {
          preventNegativeValues(event); // Check for negative values
          validateContributions(); // Validate contributions. Checking here so the user sees the validation update live
        });
      });
    });
</script>
